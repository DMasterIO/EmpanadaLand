name: 🏷️ Manual Release

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.2.3)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean

env:
  MINECRAFT_VERSION: "1.21.6"
  NEOFORGE_VERSION: "21.6.0-beta"
  JAVA_VERSION: 21

jobs:
  manual-release:
    name: 🚀 Create Manual Release
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    permissions:
      contents: write
      discussions: write
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: ✅ Validate version format
      run: |
        VERSION="${{ github.event.inputs.version }}"
        if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)*$ ]]; then
          echo "❌ Invalid version format: $VERSION"
          echo "Expected format: X.Y.Z or X.Y.Z-suffix (e.g., 1.2.3 or 1.2.3-beta)"
          exit 1
        fi
        echo "✅ Version format is valid: $VERSION"
    
    - name: 🔍 Check if tag exists
      run: |
        VERSION="${{ github.event.inputs.version }}"
        if git rev-parse "v$VERSION" >/dev/null 2>&1; then
          echo "❌ Tag v$VERSION already exists!"
          exit 1
        fi
        echo "✅ Tag v$VERSION is available"
    
    - name: ☕ Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: gradle
    
    - name: 🔧 Setup Gradle
      uses: gradle/gradle-build-action@v3
    
    - name: 🏷️ Update version
      run: |
        VERSION="${{ github.event.inputs.version }}"
        
        # Update gradle.properties
        sed -i "s/mod_version=.*/mod_version=$VERSION/" gradle.properties
        
        # Update build.gradle
        sed -i "s/version = .*/version = '$VERSION'/" build.gradle
        
        echo "📝 Updated version to: $VERSION"
    
    - name: 🏗️ Build mod
      run: |
        chmod +x gradlew
        ./gradlew clean build --no-daemon --parallel
    
    - name: 📁 Prepare release artifacts
      run: |
        mkdir -p release-artifacts
        
        # Copy main JAR
        MAIN_JAR=$(find build/libs -name "*.jar" -not -name "*-sources.jar" -not -name "*-dev.jar" | head -1)
        cp "$MAIN_JAR" release-artifacts/
        
        # Copy sources JAR if exists
        SOURCES_JAR=$(find build/libs -name "*-sources.jar" | head -1)
        if [ -n "$SOURCES_JAR" ]; then
          cp "$SOURCES_JAR" release-artifacts/
        fi
        
        # Create release info
        VERSION="${{ github.event.inputs.version }}"
        cat > release-artifacts/RELEASE_INFO.md << EOF
        # EmpanadaLand v$VERSION Release Information
        
        ## Build Details
        - **Version:** $VERSION
        - **Minecraft:** ${{ env.MINECRAFT_VERSION }}
        - **NeoForge:** ${{ env.NEOFORGE_VERSION }}
        - **Java:** ${{ env.JAVA_VERSION }}
        - **Build Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')
        - **Commit:** ${{ github.sha }}
        - **Pre-release:** ${{ github.event.inputs.prerelease }}
        
        ## Installation
        1. Install NeoForge ${{ env.NEOFORGE_VERSION }} for Minecraft ${{ env.MINECRAFT_VERSION }}
        2. Download the main JAR file from this release
        3. Place it in your mods/ folder
        4. Enjoy Chilean empanadas in Minecraft! 🥟
        EOF
        
        echo "📋 Release artifacts prepared:"
        ls -la release-artifacts/
    
    - name: 🏷️ Create tag and commit
      run: |
        VERSION="${{ github.event.inputs.version }}"
        
        # Configure git
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        # Commit version changes
        git add gradle.properties build.gradle
        git commit -m "🔖 Release version $VERSION"
        
        # Create tag
        git tag -a "v$VERSION" -m "Release version $VERSION"
        
        # Push changes
        git push origin master
        git push origin "v$VERSION"
    
    - name: 📝 Generate release notes
      id: release_notes
      run: |
        VERSION="${{ github.event.inputs.version }}"
        PREV_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        
        cat > release_notes.md << 'EOF'
        # 🥟 EmpanadaLand v$VERSION
        
        Manual release of EmpanadaLand mod for Minecraft!
        
        ## 🎮 Compatibility
        - **Minecraft:** ${{ env.MINECRAFT_VERSION }}
        - **NeoForge:** ${{ env.NEOFORGE_VERSION }}
        - **Java:** ${{ env.JAVA_VERSION }}+
        
        ## 🥟 What's in the Box?
        This mod adds authentic Chilean cuisine to Minecraft:
        
        ### 🍴 Empanadas
        - **Empanada de Pino** - Strength + Fire Resistance
        - **Empanada de Queso** - Speed + Absorption  
        - **Empanada Pastel de Choclo** - Night Vision + Jump Boost
        
        ### 🍷 Traditional Drinks
        - **Vaso de Chupilca del Diablo** - Haste + Night Vision + Nausea
        - **Vaso Terremoto** - Luck + Slow Falling + Nausea
        
        ### 🥄 Ingredients
        - **Masa Madre** - Essential for empanada crafting
        - **Harina** - Special flour without baking powder
        - **Queso** - Fresh Chilean cheese
        
        ## 📦 Files in this Release
        - `empanadaland-$VERSION.jar` - Main mod file (place in mods folder)
        - `empanadaland-$VERSION-sources.jar` - Source code (for developers)
        - `RELEASE_INFO.md` - Detailed build information
        
        ## 🔄 Changes
        EOF
        
        # Add changelog if there's a previous tag
        if [ -n "$PREV_TAG" ]; then
          echo "" >> release_notes.md
          echo "### Changes since $PREV_TAG:" >> release_notes.md
          git log --pretty=format:"- %s (%h)" "$PREV_TAG"..HEAD >> release_notes.md
        else
          echo "- Initial release of the mod" >> release_notes.md
        fi
        
        cat >> release_notes.md << 'EOF'
        
        ## 🛠️ Installation Instructions
        1. Download and install [NeoForge ${{ env.NEOFORGE_VERSION }}](https://neoforged.net) for Minecraft ${{ env.MINECRAFT_VERSION }}
        2. Download the `empanadaland-$VERSION.jar` file from the assets below
        3. Place the JAR file in your `mods/` folder
        4. Launch Minecraft and enjoy! 🇨🇱
        
        ## 🐛 Found a Bug?
        Please report issues on our [GitHub Issues](https://github.com/DMasterIO/EmpanadaLand/issues) page.
        
        ## 💝 Support the Project
        If you enjoy this mod, consider:
        - ⭐ Starring the repository
        - 🐛 Reporting bugs
        - 💡 Suggesting new Chilean foods to add
        - 🇨🇱 Sharing your Chilean culture knowledge
        
        ---
        **¡Que disfrutes las empanadas en Minecraft!** 🥟✨
        
        *From Chile to the Minecraft world* 🇨🇱⛏️
        EOF
        
        # Replace version placeholder
        sed -i "s/\$VERSION/$VERSION/g" release_notes.md
        
        echo "📋 Release notes generated for v$VERSION"
    
    - name: 🚀 Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ github.event.inputs.version }}
        name: "🥟 EmpanadaLand v${{ github.event.inputs.version }}"
        body_path: release_notes.md
        files: |
          release-artifacts/*.jar
          release-artifacts/RELEASE_INFO.md
        draft: false
        prerelease: ${{ github.event.inputs.prerelease }}
        generate_release_notes: true
        discussion_category_name: "Releases"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: 🎉 Release completed
      run: |
        VERSION="${{ github.event.inputs.version }}"
        PRERELEASE_TEXT=""
        if [[ "${{ github.event.inputs.prerelease }}" == "true" ]]; then
          PRERELEASE_TEXT=" (pre-release)"
        fi
        
        echo "🎉 Manual release v$VERSION created successfully!$PRERELEASE_TEXT"
        echo "📦 Download: https://github.com/DMasterIO/EmpanadaLand/releases/tag/v$VERSION"
        echo "🚀 Release is now available for download!"

  # Handle releases created through GitHub UI
  github-release:
    name: 📦 Process GitHub Release
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'
    permissions:
      contents: write
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.release.tag_name }}
    
    - name: ☕ Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: gradle
    
    - name: 🔧 Setup Gradle
      uses: gradle/gradle-build-action@v3
    
    - name: 🏗️ Build mod for existing release
      run: |
        chmod +x gradlew
        
        # Extract version from tag
        VERSION="${{ github.event.release.tag_name }}"
        VERSION="${VERSION#v}"  # Remove 'v' prefix if present
        
        # Update version in files
        sed -i "s/mod_version=.*/mod_version=$VERSION/" gradle.properties
        sed -i "s/version = .*/version = '$VERSION'/" build.gradle
        
        # Build
        ./gradlew clean build --no-daemon --parallel
        
        echo "✅ Built mod for release $VERSION"
    
    - name: 📤 Upload artifacts to existing release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ github.event.release.tag_name }}
        files: |
          build/libs/*.jar
        append_body: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: ✅ Processing complete
      run: |
        echo "✅ Artifacts uploaded to existing release: ${{ github.event.release.tag_name }}"
        echo "📦 Release URL: ${{ github.event.release.html_url }}"
